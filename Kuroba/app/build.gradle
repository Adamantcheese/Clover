apply plugin: 'com.android.application'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28

        /**
         * ------------------------------------------------------------
         *
         *              CHANGE PER RELEASE BUILD
         *              SEE docs/release.txt FOR INFO
         *
         * ------------------------------------------------------------
         */
        //bump the MAJOR (XX) version when there are incompatible changes between versions
        //or major changes to the application that would require a reinstall
        //bump the MINOR (YY) version when there are compatible changes between versions (ie database changes)
        //or if there are big application level changes like tearing out/adding major features
        //bump the PATCH (ZZ) version otherwise, for anything small
        int major = 4
        int minor = 4
        int patch = 4

        /**
         * ------------------------------------------------------------
         *
         *              CHANGE PER NEW FORK MODIFICATION
         *              IF AND ONLY IF NECESSARY
         *
         * ------------------------------------------------------------
         */
        //if you change this, also change the AndroidManifest package
        applicationId "com.github.adamantcheese.chan"
        //these are your update and github repo endpoints, change it to your repository
        //the repo endpoint is also used to calculate the issues endpoint
        buildConfigField "String", "UPDATE_API_ENDPOINT", "\"https://api.github.com/repos/Adamantcheese/Kuroba/releases/latest\""
        buildConfigField "String", "GITHUB_ENDPOINT", "\"https://github.com/Adamantcheese/Kuroba\""
        //this is for checking who's built what in debug logs
        buildConfigField "String", "SIGNATURE", "\"8952c098\""

        /**
         * ------------------------------------------------------------
         *
         *              DON'T CHANGE THESE AUTOCALCULATIONS
         *              USED FOR VERSION CODE GENERATION
         *              USED FOR VERSION NAME GENERATION
         *              USED FOR AUTO UPDATER NAMING CONSISTENCY
         *
         * ------------------------------------------------------------
         */
        versionCode major * 10000 + minor * 100 + patch
        versionName "v" + major + "." + minor + "." + patch

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = manifestPlaceholders.get("appName").toString() + ".apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    // Needed for volley
    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE-LGPL-3.txt'
        exclude 'META-INF/LICENSE-LGPL-2.1.txt'
        exclude 'META-INF/LICENSE-W3C-TEST'
    }

    buildTypes {
        release {
            /*
            If you want to sign releases without using "Generate Signed APK", make a file in app/keys.properties with the following content:
            keystoreFile=yourkey.store
            keystorePass=pass
            keyAlias=alias
            keyPass=pass
            */
            // Just select your build variant (debug/release) and do Build -> APK
            File f = file('keys.properties')
            if (f.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(f)
                props.load(is)

                signingConfigs {
                    release {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']
                    }
                }

                is.close()
                signingConfig signingConfigs.release
            }
            // Because we're always on dev, don't minify to make sure that crash logs are intelligible
            //You can turn this on if you wish
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            debuggable = false
        }
        debug {
            minifyEnabled false
            debuggable = true
        }
    }

    flavorDimensions "default"

    productFlavors {
        stable {
            dimension "default"
            //these are manifest placeholders for the application name and icon location
            manifestPlaceholders = [
                    appName              : "Kuroba",
                    iconLoc              : "@mipmap/ic_launcher",
                    fileProviderAuthority: "${applicationIdSuffix}.fileprovider"
            ]
        }
        dev {
            dimension "default"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"

            //these are manifest placeholders for the application name and icon location
            manifestPlaceholders = [
                    appName              : "Kuroba${versionNameSuffix}",
                    iconLoc              : "@mipmap/ic_launcher",
                    fileProviderAuthority: "${applicationIdSuffix}.fileprovider"
            ]
        }
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.exifinterface:exifinterface:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.google.android.exoplayer:exoplayer:2.10.1'

    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    implementation 'com.j256.ormlite:ormlite-core:5.1'
    implementation 'com.j256.ormlite:ormlite-android:5.1'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.12'
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.10.0'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'org.nibor.autolink:autolink:0.10.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'me.xdrop:fuzzywuzzy:1.1.10'
    implementation 'org.codejargon.feather:feather:1.0'
    implementation 'com.vladsch.flexmark:flexmark:0.42.12'
    implementation 'com.vladsch.flexmark:flexmark-ext-gfm-issues:0.42.12'
    implementation 'com.vdurmont:emoji-java:4.0.0'
    implementation "io.reactivex.rxjava2:rxjava:2.2.9"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
}

def getLatestCommit(String branchName) {
    def stdout = new ByteArrayOutputStream()
    exec {
        def printArgs = "%H; %ad; %s"
        def dateFormat = "%Y-%m-%d %H:%M:%S"

        commandLine 'git', 'log', branchName, '-n 1', "--pretty=format:${printArgs}", "--date=format:${dateFormat}"
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def getLastCommitsFromCommitByHash(String branchName, String from) {
    def stdout = new ByteArrayOutputStream()
    exec {
        def printArgs = "%H; %ad; %s"
        def dateFormat = "%Y-%m-%d %H:%M:%S"

        commandLine 'git', 'log', branchName, "${from}..HEAD", "--pretty=format:${printArgs}", "--date=format:${dateFormat}"
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

def checkBranchExists(String branchName) {
    def stdout = new ByteArrayOutputStream()
    exec {

        commandLine 'git', 'rev-parse', '--verify', branchName
        standardOutput = stdout
    }

    return stdout.toString().trim()
}

task checkBranchExistsTask {
    doLast {
        println(checkBranchExists(branch_name))
    }
}

task getLatestCommitTask {
    doLast {
        println(getLatestCommit(branch_name))
    }
}

task getLastCommitsFromCommitByHashTask {
    doLast {
        println(getLastCommitsFromCommitByHash(branch_name, from))
    }
}

task getVersionCodeTask {
    doLast {
        println(project.android.defaultConfig.versionCode)
    }
}